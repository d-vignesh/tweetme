{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","type","handleActionBackendEvent","console","log","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","isDetail","handlePerformAction","newActionTweet","content","Fragment","href","TweetsList","newTweets","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","concat","username","apiTweetList","handleDidRetweet","newTweet","updatedTweetsInit","unshift","updatedFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEle","getElementById","ReactDOM","render","StrictMode","e","createElement","TweetsEle","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34ec24f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n          }\n      }\n  }\nreturn cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  \n  const xhr = new XMLHttpRequest()\n  const url = `http://localhost:8000/api${endpoint}`\n  xhr.responseType = 'json'\n  \n  const csrftoken = getCookie('csrftoken');\n\n  xhr.open(method, url)\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n  if (csrftoken) {\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n  }\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function() {\n    callback({'message': 'an error occured'}, 400)\n  }\n  xhr.send(jsonData)\n}\n\n","import React from 'react'\n\nimport {apiTweetAction} from './lookup'\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n\n    const handleActionBackendEvent = (response, status) => {\n      console.log(response, status)\n      if ((status === 200 || status === 201) && didPerformAction) {\n        didPerformAction(response, status)\n      }\n    }\n\n    const handleClick = (event) => {\n      event.preventDefault()\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n    }\n    return <button className={className} onClick={handleClick}>  {display} </button>\n  }","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup('POST', '/tweets/create/', callback, {content: newTweet})\n}\n \nexport function apiTweetAction(tweetId, action, callback) {\n    const data = {id: tweetId, action: action}\n    backendLookup('POST', '/tweets/action/', callback, data)\n}\n\nexport function apiTweetList(username, callback) {\n    let endpoint = '/tweets'\n    if (username) {\n        endpoint = `/tweets/?username=${username}`\n    }\n    backendLookup('GET', endpoint, callback)\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup('GET', `/tweets/${tweetId}/`, callback)\n}","import React, {useState} from 'react'\n\nimport {ActionBtn} from './buttons'\n\nexport function ParentTweet(props) {\n    const {tweet} = props \n    return tweet.parent ? <div className='row'>\n      <div className='col-11 mx-auto p-3 border rounded'>\n        <p className='mb-0 text-muted small'>retweet</p>\n        <Tweet hideActions className={' '} tweet={tweet.parent}/>\n      </div>\n    </div> : null \n}\n\nexport function Tweet(props) {\n    const {tweet, didRetweet, hideActions} = props \n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    const path = window.location.pathname\n    const match = path.match(/\\d+/)\n    const urlTweetId = match ? match[0] : -1\n    const isDetail = `${tweet.id}` === `${urlTweetId}` \n\n    const handleLink = (event) => {\n      event.preventDefault()\n      window.location.href = `/${tweet.id}`\n    }\n\n    const handlePerformAction = (newActionTweet, status) => {\n      if (status === 200) {\n        setActionTweet(newActionTweet)\n      } else if (status === 201) {\n        if (didRetweet) {\n          didRetweet(newActionTweet)\n        }\n      }\n    }\n\n    return <div className={className}>\n      <div>\n        <p>{tweet.id} - {tweet.content}</p>\n        <ParentTweet tweet={tweet} />\n      </div>\n      <div className='btn btn-group'>\n        {(actionTweet && hideActions !== true) && <React.Fragment>\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: 'like', display:'likes'}} />\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: 'unlike', display:'unlike'}} />\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: 'retweet', display:'retweet'}} />\n        </React.Fragment>}\n        {isDetail === true ? null : <button className='btn btn-outline-primary' onClick={handleLink}>view</button>}\n      </div>\n    </div>\n  }","import React, {useEffect, useState} from 'react'\n\nimport {apiTweetList} from './lookup'\nimport {Tweet} from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : [])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    \n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      if (tweetsDidSet === false) {\n        const handleTweetListLookup = (response, status) => {\n          if(status === 200) {\n            setTweetsInit(response)\n            setTweetsDidSet(true)\n          }\n        }\n        apiTweetList(props.username, handleTweetListLookup)\n      }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n       const updatedTweetsInit = [...tweets]\n       updatedTweetsInit.unshift(newTweet)\n       setTweetsInit(updatedTweetsInit)\n\n       const updatedFinalTweets = [...tweetsInit]\n       updatedFinalTweets.unshift(tweets)\n       setTweets(updatedFinalTweets)\n    }\n  \n    return tweets.map((item, index) => {\n      return <Tweet \n                tweet={item} \n                didRetweet={handleDidRetweet}\n                className='my-5 py-5 border bg-white text-dark' \n                key={`${index}-{item.id}`}/>\n    })\n  }\n","import React from 'react'\n\nimport {apiTweetCreate} from './lookup'\n\nexport function TweetCreate(props) {\n  const textAreaRef = React.createRef()\n  const {didTweet} = props\n\n  const handleBackendUpdate = (response, status) => {\n    if(status === 201) {\n      didTweet(response)\n    } else {\n      console.log(response)\n      alert('an error occured')\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    apiTweetCreate(newVal, handleBackendUpdate)\n    textAreaRef.current.value = ''  \n  }\n  return <div className={props.className}>\n  <form onSubmit={handleSubmit}>\n    <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n    </textarea>\n    <button type='submit' className='btn btn-primary my-3'>tweet</button>\n  </form>\n  </div>\n}","import React, {useState, useEffect} from 'react'\n\nimport {TweetsList} from './list'\nimport {TweetCreate} from './create'\nimport {apiTweetDetail} from './lookup'\nimport {Tweet} from './detail'\n\nexport function TweetsComponent(props) {\n\n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === 'false' ? false : true \n\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n\n  return <div className={props.className}>\n    {canTweet === true && <TweetCreate className='col-12 mb-3' didTweet={handleNewTweet} /> }\n    <TweetsList newTweets={newTweets} {...props}/>\n  </div> \n}\n  \nexport function TweetDetailComponent(props) {\n  const {tweetId} = props \n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] =  useState(null)\n\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response)\n    }\n    else {\n      alert('An error occured when finding your tweet')\n    }\n  }\n\n  useEffect(() => {\n    if (didLookup === false) {\n      apiTweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n    }\n  }, [didLookup, setDidLookup, tweetId])\n\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className}/>\n}\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEle = document.getElementById('root')\nif (appEle) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEle\n  );\n}\n\nconst e = React.createElement\nconst TweetsEle = document.getElementById('tweetme')\nif (TweetsEle) {\n  \n  ReactDOM.render(\n    e(TweetsComponent, TweetsEle.dataset),\n    TweetsEle\n  );\n}\n\nconst tweetDetailElements = document.querySelectorAll('.tweetme-detail')\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}